(setlocale LC_ALL "")
(include "../forscheme/misc.scm")

(define (drop-even l) (if (null? l) '() (cons (car l) (drop-even (cddr l)))))

(define rus2chiurl-table (list
			(cons "Лк" "luk")
			(cons "1 Кор" "1co")
            (cons "Мф" "mat")
			(cons "Мк" "mak")
            (cons "Ин" "jhn")
			(cons "Лк" "luk")
			(cons "Евр" "heb")
			(cons "1 Кор" "1co")
			(cons "2 Кор" "2co")
			(cons "1 Тим" "1ti")
			(cons "2 Тим" "2ti")
            (cons "Рим" "rom")
			))
(define rusname2engname-table(list 
           (cons "Гал" "Galatians")
           (cons "Мк" "Mark")
           (cons "Мф" "Matthew")
           (cons "Ин" "John")
		   (cons "Евр" "Hebrews")
           (cons "Лк" "Luke")
		   (cons "1 Кор" "1 Corinthians")
		   (cons "2 Кор" "2 Corinthians")
		   (cons "1 Тим" "1 Timothy")
		   (cons "2 Тим" "2 Timothy")
           (cons "Рим" "Romans")
           ))
(define rusname2chiname-table (list 
                   (cons "Гал" "加拉太書")
                   (cons "Мк" "馬可福音")
                   (cons "Мф" "馬太福音")
                   (cons "Ин" "約翰福音")
                   (cons "Лк" "路加福音")
                   (cons "Евр" "希伯來書")
                   (cons "1 Кор" "哥林多前書")
                   (cons "2 Кор" "哥林多後書")
                   (cons "1 Тим" "提摩太前書")
                   (cons "2 Тим" "提摩太後書")
                   (cons "Рим" "羅馬書")
           ))

(define (roman2arabic romtext) (get-value (list 
                                            (cons "I" "1")(cons "II" "2")(cons "III" "3")(cons "IV" "4")(cons "V" "5")
                                            (cons "VI" "6")(cons "VII" "7")(cons "VIII" "8")(cons "IX" "8")(cons "X" "10")
                                            (cons "XI" "11")(cons "XII" "12")(cons "XIII" "13")(cons "XIV" "14")(cons "XV" "15")
                                            (cons "XVI" "16")(cons "XVII" "17")(cons "XVIII" "18")(cons "XIX" "19")(cons "XX" "20")
                                            (cons "XXI" "21")(cons "XXII" "22")(cons "XXIII" "23")(cons "XXIV" "24")(cons "XXV" "25")
                                            )
                                          romtext))

(define (parse-russian-title text) (define s 'myflatten)
(define myflatten(lambda(l)(if(null? l)'()(if(and(list?(car l))(eq?(caar l)s))(union(cdar l)(myflatten(cdr l)))
                                            (cons(car l)(myflatten(cdr l)))))))
  (define (mymap proc l init)(if(null? l)'()(let((res(proc(car l)init)))(cons (car res) (mymap proc (cdr l)(cdr res))))))
  (let* ((tokenized (mytokenize " *, *" text))
         (name (string-filter (lambda (char) (not (eq? #\. char))) (list-ref tokenized 0)))
         (tokenized (list-tail tokenized 2))
         (chapter (roman2arabic (list-ref tokenized 0)))
         (verses(map (lambda(m)(map(lambda(n)(match:substring m n))'(1 2 3 4)))(list-matches 
                                         ", *([XVI]*),? *([0-9]+) *- *([XVI]*),? *([0-9]+)[^.,0-9XVI]*" text)))
         (verses (mymap (lambda(verse prev-chap)(let*((c1 (list-ref verse 0))(c2 (list-ref verse 2))
                                                     (v1(list-ref verse 1))(v2(list-ref verse 3))
                                                     (c1(if(string-null? c1)prev-chap c1))(c2(if(string-null? c2)c1 c2))
                                                     (new-verse(if(eq? c1 c2)(list c1 v1 v2)
                                                                 (list s(list c1 v1 'end)(list c2 'start v2))))
                                                         )(cons new-verse c1))) verses "error-chap"))
         )(list name (myflatten verses))))

(define (get-rdg-english-text args) (define (myflatten ll) (if (null? ll) '() (append (car ll) (flatten (cdr ll)))))
(let* (
        (name (rusname2engname(list-ref args 0)))
        (elems (list-ref args 1))
        (chapters (map roman2arabic (delete-duplicates(map car elems))))
        (chapters-n-sources(map(lambda(chap)(cons chap (download2string (string-append 
                                                "\"http://www.kingjamesbibleonline.org/book.php?book=" (string-map (lambda (char) 
                                                (if (char=? char #\space) #\+ char)) name) "&chapter=" chap "&verse=\""))))chapters))
        (extract-and-process-verses(lambda(elem)(let*((chap (roman2arabic(car elem)))
                                                     (start(cadr elem))
                                                     (end(caddr elem))
                                                     (source(get-value chapters-n-sources chap))
                                                     (lines (mytokenize "</a>" source))
                                                     (lines (myflatten (map (lambda (s) (mytokenize "<a href=\"" s)) lines)))
                                                     (lines (filter (lambda (line) (regexp-match?
                                                                                     (string-match "View more translations of" line))) lines))
                                                     (lines(map(lambda(line)(cons
                                                                              (substring(match:substring(string-match":[0-9]+"line))1)
                                                                              (match:suffix(string-match">"line))))lines))
                                                     (startnum(if(eq? start 'start)-1(string->number start)))
                                                     (endnum(if(eq? end 'end)100500(string->number end)))
                                                     (lines(filter(lambda(pair)(<= startnum(string->number(car pair))endnum))lines))
                                                     (lines (map (lambda(pair)(string-concatenate (list (cdr pair) "\\\\\n"))) lines))
                                                     (lines (map (lambda(s) (regexp-substitute/global #f "<[^<>]*>" s 'pre 'post))lines))
                                                  )(string-concatenate lines))))
        )(string-concatenate (map extract-and-process-verses elems))))

;chinese text
(define (get-rdg-chinese-text args) (define (myflatten ll) (if (null? ll) '() (append (car ll) (flatten (cdr ll)))))
(let* (
        (name (rusname2chiname(list-ref args 0)))
        (elems (list-ref args 1))
        (chapters (map roman2arabic (delete-duplicates(map car elems))))
        (code (get-value rus2chiurl-table (list-ref args 0)))
        (d(lambda(url)(read-delimited""(open-input-pipe(string-concatenate(list"wget -O - "url"|iconv -f Big5 -t UTF8"))))))
        (regexp "<td class=\"vn\">[0-9]+:([0-9]+)</td><td class=\"vn\">&nbsp;&nbsp;</td><td class=\"v b5\">([^<>]+)</td>")
        (chapters-n-sources(map(lambda(c)(cons c(d(string-append
                                                    "\"http://www.o-bible.com/cgibin/ob.cgi?version=hb5&book="code"&chapter="c"\""))))chapters))
        (extract-and-process-verses(lambda(elem)(let*((chap (roman2arabic(car elem)))
                                                     (start(cadr elem))
                                                     (end(caddr elem))
                                                     (src(get-value chapters-n-sources chap))
                                                     (startnum(if(eq? start 'start)-1(string->number start)))
                                                     (endnum(if(eq? end 'end)100500(string->number end)))
                                                     (v (map (lambda(match)(cons (match:substring match 1) (match:substring match 2)))
                                                       (list-matches regexp src)))
                                                     ;(dum(display (string-append
                                                    ;"\"http://www.o-bible.com/cgibin/ob.cgi?version=hb5&book="code"&chapter="chap"\"\n")))
                                                     ;(dum (begin(display "\nv\n"(display v)(exit))))
                                                     (v (filter (lambda(pair)(<= startnum(string->number (car pair))endnum)) v))
                                                     (v (map cdr v))
                                                     (v (map(lambda(s)(string-filter
                                                                        (lambda(c)(not(or(eq? #\newline c)(eq? #\space c)(eq? #\tab c))))s))v))
                                                     (v (map (lambda(s)(string-concatenate(list s "\\\\\n"))) v))
                                                  )(string-concatenate v))))
        )(string-concatenate (map extract-and-process-verses elems))))
;titles
(define(get-eng-title args)((lambda(s)(string-append s"."))(fold(lambda(elem s)(let((chp(roman2arabic(car elem)))(start(cadr elem))(end(caddr elem)))
                                                  (string-append s(if(string-null? s)(string-append(rusname2engname(car args))" ")"")
                                                                           (if(or(string-null? s)(eq? start 'start))"" ", ")
                                                                           (cond((eq? start 'start)(string-append chp ":" end))
                                                                           ((eq? end 'end)(string-append chp ":" start "--"))
                                                                           (#t(string-append chp ":" start "--" chp ":" end))))))""(cadr args))))
(define(get-chi-title args)((lambda(s)(string-append s"."))(fold(lambda(elem s)(let((chp(roman2arabic(car elem)))(start(cadr elem))(end(caddr elem)))
                                                  (string-append s(if(string-null? s)(string-append(rusname2chiname(car args))" ")"")
                                                                           (if(or(string-null? s)(eq? start 'start))"" ", ")
                                                                           (cond((eq? start 'start)(string-append chp ":" end))
                                                                           ((eq? end 'end)(string-append chp ":" start "--"))
                                                                           (#t(string-append chp ":" start "--" chp ":" end))))))""(cadr args))))
(define (rusname2engname rusname) (get-value rusname2engname-table rusname))
(define (rusname2chiname rusname) (get-value rusname2chiname-table rusname))

;script
;(map (lambda (s)(begin(display(parse-russian-title s))(display " ")(display (get-chi-title (parse-russian-title s)))(newline))) (list 
;"Евр., 329 зач. (от полу́), XI, 24-26, 32 - XII, 2." 
;"Ин., 5 зач., I, 43-51." 
;"Рим., 112 зач., XIII, 11 - XIV, 4." 
;"Мф., 17 зач., VI, 14-21*."
;))
