(setlocale LC_ALL "")
(use-modules (ice-9 regex))
(use-modules (ice-9 common-list))
(use-modules (ice-9 format))
(use-modules (srfi srfi-1))
(use-modules (ice-9 rdelim))
(use-modules (ice-9 popen))

(define (dec n) (- n 1))
(define (inc n) (+ n 1))
(define (replace l num elem) (if (<= num 0) (cons elem (cdr l)) (cons (car l) (replace (cdr l) (dec num) elem))))
(define (seq a b) (if (<= a b) '() (cons a (seq (+ a 1) b))))
(define (flatten ll) (if (null? ll) '() (union (car ll) (flatten (cdr ll)))))
(define (find-first-index l pred) (define (inner index li)(if (null? li) -1 (if (pred(car li))index(inner (+ index 1)(cdr li)))))
  (inner 0 l))
(define (get-value l key) (if (null? l) (string-concatenate (list "not found:" key))
                            (if (string=? key (car (car l))) (cdr (car l)) (get-value (cdr l) key))))
(define (get-value3s l key fallback-msg) (if (null? l) fallback-msg
                            (if (string=? key (car (car l))) (cdr (car l)) (get-value3s (cdr l) key fallback-msg))))
(define (get-random-elt l) (list-ref l (random (length l))))

(define (mytokenize regexp str) (define cr (make-regexp regexp))
  (define (inner str start)
    (if (<= (string-length str) start) '()
	((lambda () (define res (regexp-exec cr str start))
	   (if (regexp-match? res) 
	     (if (= (match:start res) start) (inner str (match:end res))
	  (cons (substring str start (match:start res)) (inner str (match:end res))))
	  (list (substring str start)))))
	))
  (inner str 0))
(define (string-split str) (if(string-null? str)'()(cons(substring str 0 1)(string-split (string-drop str 1)))))
(define (myglobsubs s pat res) (regexp-substitute/global #f pat s 'pre res 'post))

(define (download2string url) (read-delimited "" (open-input-pipe (string-concatenate (list "wget -O - "
                                                   url)))))

(define (save-string-mapping table var-name file-name)
  (let* ((outport (open-file file-name "w")))
    (begin (format outport "(setlocale LC_ALL \"\")\n(define ~a (list " var-name)
           (map (lambda (pair) (format outport "(cons ~s ~s)\n" (car pair) (cdr pair))) table)
           (format outport "))")
           )
    ))
