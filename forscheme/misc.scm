(setlocale LC_ALL "")
(use-modules (ice-9 regex))
(use-modules (ice-9 common-list))
(use-modules (ice-9 format))
(use-modules (srfi srfi-1))
(use-modules (ice-9 rdelim))
(use-modules (ice-9 popen))

(define (seq a b) (if (<= a b) '() (cons a (seq (+ a 1) b))))
(define (mytokenize regexp str) (define cr (make-regexp regexp))
  (define (inner str start)
    (if (<= (string-length str) start) '()
	((lambda () (define res (regexp-exec cr str start))
	   (if (regexp-match? res) 
	     (if (= (match:start res) start) (inner str (match:end res))
	  (cons (substring str start (match:start res)) (inner str (match:end res))))
	  (list (substring str start)))))
	))
  (inner str 0))(define (string-split str) (if(string-null? str)'()(cons(substring str 0 1)(string-split (string-drop str 1)))))
(define (download2string url) (read-delimited "" (open-input-pipe (string-concatenate (list "wget -O - "
                                                   url)))))
(define (flatten ll) (if (null? ll) '() (union (car ll) (flatten (cdr ll)))))
(define (get-value l key fallback-msg) (if (null? l) fallback-msg
                            (if (string=? key (car (car l))) (cdr (car l)) (get-value (cdr l) key fallback-msg))))
(define (save-string-mapping table var-name file-name)
  (let* ((outport (open-file file-name "w")))
    (begin (format outport "(setlocale LC_ALL \"\")\n(define ~a (list " var-name)
           (map (lambda (pair) (format outport "(cons ~s ~s)\n" (car pair) (cdr pair))) table)
           (format outport "))")
           )
    ))
(define (myglobsubs s pat res) (regexp-substitute/global #f pat s 'pre res 'post))
(define (find-first-index l pred) (define (inner index li)(if (null? li) -1 (if (pred(car li))index(inner (+ index 1)(cdr li)))))
  (inner 0 l))
(define(get-translation char)(let*( (code (read-delimited "" (open-input-pipe (string-concatenate (list "./big5.exe " char)))))
                                   (code (string-concatenate (list "%" (substring code 0 2) "%" (substring code 2 4))))
                                    (raw (download2string(string-concatenate(list "http://humanum.arts.cuhk.edu.hk/Lexis/lexi-can/"
                                                                                 "search.php?q=" code))))
                                    (match-res (string-match "sound.php.s=([a-z]+[0-9])" raw))
                                    (transl (if (regexp-match? match-res) (match:substring match-res 1) "false"))
                                    (transl (regexp-substitute/global #f "j" transl 'pre "y" 'post))
                                    (transl (regexp-substitute/global #f "z" transl 'pre "j" 'post))
                                    (transl (regexp-substitute/global #f "c" transl 'pre "ch" 'post))
                                    (transl (regexp-substitute/global #f "oe" transl 'pre "aap" 'post))
                                    (transl (regexp-substitute/global #f "aan" transl 'pre "aap" 'post))
                                    (transl (myglobsubs transl "oe" "eu"))
                                    (transl (myglobsubs transl "eoi" "eui"))
                                    (transl (myglobsubs transl "oeng" "eung"))
                                    (transl (myglobsubs transl "eot" "eut"))
                                    (transl (myglobsubs transl "oek" "euk"))
                                    (vowel? (lambda (s) (or (string=? s "a")(string=? s "e")(string=? s "o")(string=? s "u")
                                                            (string=? s "i")(string=? s "y"))))
                                    (tone (string-take-right transl 1))
                                    (transl (string-drop-right transl 1))
                                    (first-vowel-index (find-first-index (string-split transl) vowel?))
                                    (tonemark (cond ((string=? tone "1") "1")((string=? tone "2") "2")((string=? tone "6") "")
                                            ((string=? tone "4") "4")((string=? tone "5") "2")((string=? tone "3") "")))
                                    (transl (string-replace transl tonemark (+ 1 first-vowel-index)(+ 1 first-vowel-index)))
                                    (transl (if (> (string->number tone) 3)(string-replace transl "h"
                                                                          (+ 2 first-vowel-index)(+ 2 first-vowel-index) )transl))
                                    ;(transl (cond 
                                              ;((or (string=? tone "1")(string=? tone "2")(string=? tone "1") )
                                    )
                               transl))
(define (query-string-mapping table query-line) 
  (let* (   (unseen-list (filter (lambda (s) (string-null? (get-value table s "")))(string-split query-line)))
            (addition (map (lambda (s) (cons s (get-translation s))) unseen-list)) )
    (append table addition)))
(define (get-random-elt l) (list-ref l (random (length l))))
