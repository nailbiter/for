(setlocale LC_ALL "")
(include "misc.scm")

;naive lin algebra
(define (list->mat l) (define dim (sqrt (length l)))
  (cond ((eq? (car l) 'ns) (let((m (cadr l))
                                   (n (caddr l))
                                   (M (cdddr l))
                                   )
                                  (partite (dup n m) M)))
        ((integer? dim) (let ((edim (inexact->exact dim)))(partite (dup edim edim) l)))
        (#t '())))
(define (signswitch . z)
	(define (inner2 l ctr) (if (null? l) '() (cons (if (even? ctr) (car l) (* -1 (car l))) (inner2 (cdr l) (+ ctr 1)))))
	(define (inner1 l) (inner2 l 0))
	(cond ((eq? (length z) 1) (inner1 (car z))) ((eq? (length z) 2) (inner2 (car z) (car(cdr z))))))
(define (det m) (if (= (length m) 1) (caar m)
		  (sum (map * (signswitch (car m)) 
		(map det (map 
			       (lambda (num) (map (lambda (l) (remove-elem l num)) (cdr m)))
			       (seq 0 (length (car m))) 
			       ))))))
(define (diag l)(map (lambda(e i)(append (dup 0 i) (list e)(dup 0 (-(length l) i 1)))) l (seq 0 (length l))))
(define (replace-col M num b) (map (lambda (l b-elem) (replace-elem l num b-elem)) M b))
(define (remove-matrix-rowcol m rownum colnum) (map (lambda (l) (remove-elem l colnum)) (remove-elem m rownum)))
(define (transpose m) (map (lambda (i) (map (lambda (l) (select l i)) m)) (seq 0 (length (car m)))))
(define(matr-prod . l)
  (fold-right(lambda(A B)(if(eq? B 'id)A(map(lambda(row)(map(lambda(rowB)(fold + 0 (map * rowB row)))(transpose B)))A)))'id l))
(define(matr-sum . l)(fold-right(lambda(A B)(if(eq? B 'id)A(map (lambda (r1 r2)(map + r1 r2)) A B)))'id l))
(define (cross a1 a2)(let((u1(caar a1))(u2(cadar a1))(u3(caddar a1))(v1(caar a2))(v2(cadar a2))(v3(caddar a2)))
                       (list(list(-(* u2 v3)(* v2 u3))(-(* v1 u3)(* v3 u1))(-(* u1 v2)(* u2 v1))))))

;printing procedures
(define (number->string/latex num)(cond((integer? num)(format #f "~d" num))((rational? num)(let((num(numerator num))
    (den(denominator num)))(string-concatenate(list (if(> 0 num)"-" "")(format #f "\\mysfrac{~d}{~d}" (abs num) den)))))))
(define (matrix->string/latex . args)(let*((M(car args))
					   (dels(cond((eq?(cdr args)'())(cons"("")"))((eq?(cadr args)'d)(cons"|""|"))))
					   (del1(car dels))(del2(cdr dels)))
			       (string-concatenate(list(format #f "\\left~a\\begin{array}{" del1)
			       (string-concatenate(map (lambda (n) (format #f "r")) (seq 0 (length (car M)))))
			       (format #f "}\n")
			       (string-concatenate(map(lambda(row)(string-concatenate(list(string-concatenate(cons(number->string/latex (car row))
			       (map (lambda (e) (string-concatenate(list "&"(number->string/latex e))))(cdr row))))(format #f "\\\\\n"))))M))
			       (format #f "\\end{array}\\right~a\n" del2)
			       ))))
(define (augmented-matrix->string/latex M aug-cols) (string-concatenate(list(format #f "\\left(\\begin{array}{")
			       (string-concatenate(map (lambda (n) (format #f "r")) (seq 0 (- (length (car M)) aug-cols))))(format #f "|")
                   		(string-concatenate(map (lambda (n) (format #f "r")) (seq 0 aug-cols)))
			       (format #f "}\n")
			       (string-concatenate(map(lambda(row)(string-concatenate(list(string-concatenate(cons(number->string/latex (car row))
			       (map (lambda (e) (string-concatenate(list "&"(number->string/latex e))))(cdr row))))(format #f "\\\\\n"))))M))
			       (format #f "\\end{array}\\right)\n")
			       )))
(define (matrix->string/txt M)(define(number->string/txt e)(cond((= 0+1i e)"i")((= 0-1i e)"-i")((= -1+0i e)"-1")((= 1+0i e)"1")
                                                             ((= 0-0i e)"0")((= 0+0i e)"0")(#t e)))
(string-concatenate(map(lambda(row)(string-append(string-concatenate(map(lambda(e)(format #f"~9a"(number->string/txt e)))row))"\n"))M)))

;Gaussian elimination
(define (GE matrix executor) (define (GE-inner matrix-inner executor-inner) 'TODO)
  (GE-inner matrix (executor (list 'init matrix))))
(define (make-executor init methods) (lambda (op) (make-executor (methods init op) methods)))
;GE->print_executor->bring_to_rowechelon
