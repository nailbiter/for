(setlocale LC_ALL "")
(include "misc.scm")

(define (mydiff l)(cond
                  ((number? l)0)
                  ((eq? l 'x)1)
                  ((eq?(car l)'+)(let((a(cadr l))(b(caddr l)))(list '+ (mydiff a)(mydiff b))))
                  ((eq?(car l)'*)(let((a(cadr l))(b(caddr l)))(list '+ (list '* (mydiff a)b)(list '* a(mydiff b)))))
                  ((eq?(car l)'/)(let((u(cadr l))(v(caddr l)))
                                   (list '/ (list '+ (list '* (list '* -1(mydiff v))u)(list '* (mydiff u)v))(list '* v v))))
                  ((eq?(car l)'cos)(list '* (list '* -1 (list 'sin (cadr l)))(mydiff(cadr l))))
                  ((eq?(car l)'sin)(list '* (list 'cos (cadr l))(mydiff(cadr l))))
                  ((eq?(car l)'sqrt)(list '* (list '/ 1 (list '* 2 (list 'sqrt (cadr l))))(mydiff(cadr l))))
                  ))
                   
(define (simplify l)(define iterate (lambda(ll)(cond
                  ((number? ll)ll)
                  ((eq? ll 'x)'x)
                  ((eq?(car ll)'+)(let((a(cadr ll))(b(caddr ll)))(cond((eq? a 0)(simplify b))((eq? b 0)(simplify a))
                                                                (#t(list '+ (simplify a) (simplify b))))))
                  ((eq?(car ll)'*)(let((a(cadr ll))(b(caddr ll)))(cond
                                                                ((or(eq? a 0)(eq? b 0))0)((eq? a 1)(simplify b))
                                                                ((eq? b 1)(simplify a))(#t(list '* (simplify a) (simplify b))))))
                  ((eq?(car ll)'/)(let((u(cadr ll))(v(caddr ll)))(if(eq? u 0)0 (list '/ (simplify u)(simplify v)))))
                  ((or(eq?(car ll)'cos)(eq?(car ll)'sin)(eq?(car ll)'sqrt))(let((a(cadr ll)))(list(car ll)(simplify a))))
                  )))(iterate l))

(define (myeval l val)(cond
                  ((number? l)l)
                  ((eq? l 'x)val)
                  ((eq?(car l)'+)(let((a(cadr l))(b(caddr l)))(+ (myeval a val)(myeval b val))))
                  ((eq?(car l)'*)(let((a(cadr l))(b(caddr l)))(*(myeval a val)(myeval b val))))
                  ((eq?(car l)'/)(let((u(cadr l))(v(caddr l)))(/ (myeval u val)(myeval v val))))
                  ((eq?(car l)'cos)(cos (myeval (cadr l)val)))
                  ((eq?(car l)'sin)(sin (myeval (cadr l)val)))
                  ((eq?(car l)'sqrt)(sqrt(myeval (cadr l)val)))
                  ))
(define pi (* 4 (atan 1)))
(define expr '(+(* 20 (sin (* 10 x)))(sqrt (+ 10000 (* -1 (* (+(* 20 (cos (* 10 x)))56.5685424949238)
                                                             (+(* 20 (cos (* 10 x)))56.5685424949238)))))))
(define (myrep f x n)(if(<= n 0)x(myrep f (f x)(dec n))))
(display (myeval (myrep simplify (mydiff(mydiff expr)) 5)(/ pi 40)))(newline)(newline)
;(display (myeval expr (/ pi 40)))(newline)(newline)
(define c (* 40 (sqrt 2)))
;(display(myeval (mydiff '(/ (* 200 (sin (* 10 x)))(sqrt (+ 10000 (* -1 (* (+(* 20 (cos (* 10 x)))56.5685424949238)
;                                                             (+(* 20 (cos (* 10 x)))56.5685424949238))))))) (/ pi 40)))
