(setlocale LC_ALL "")
(use-modules (ice-9 rdelim))
(use-modules (ice-9 regex))
(use-modules (ice-9 popen))
(use-modules (ice-9 format))
(use-modules (srfi srfi-1))
(use-modules (srfi srfi-19))

(load "../forscheme/misc.scm")

(define event-list
(let* ((url "http://www.ms.u-tokyo.ac.jp/index.html")
       (mmap(lambda(f l)(map(lambda(ll)(map(lambda(item)(if (null? item) '() (f item)))ll))l)))
       (content (read-delimited "" (open-input-pipe(string-append "wget -O -" " \"" url "\""))))
       (content (regexp-substitute/global #f "<ul class=\"news\">" content 'post))
       (li-list (list-matches "</li>" content))
       (content (match:prefix (list-ref li-list (dec (length li-list)))))
       (day-list (mytokenize "</li>" content))
       (date-list (map (lambda(text)(match:substring (string-match "<div class=\"newsdate\">([0-9/]+)</div>" text)1)) day-list))
       (day-list (map (lambda(text)(mytokenize "<div class=\"newsdate\">[^<]+</div>" text)) day-list))
       (day-list (map cdr day-list))
       (speaker-list(map(lambda(l)(map(lambda(text)((match-harden match:suffix)(string-match "<strong>" text)))l))day-list))
       (speaker-list (mmap(lambda(txt)(match:prefix(string-match "</div>" txt))) speaker-list))
       (speaker-list (mmap(lambda(txt)(mytokenize "<br>" txt)) speaker-list))
       (speaker-list(mmap(lambda(l)(list(regexp-substitute/global #f "<[^>]*>"(car l)'pre 'post)(cdr l)))speaker-list))
       (ort-list (mmap (lambda(txt)(match:substring(string-match "<div class=\"newstext\">([^\n]+)<br>\n" txt)1))day-list))
       (ort-list (mmap(lambda(txt)(regexp-substitute/global #f "<[^>]+>" txt 'pre 'post))ort-list))
       (ort-list(mmap(lambda(txt)(mytokenize "&nbsp;" txt))ort-list))
       (day-list (filter (lambda(txt)(not(regexp-match?(string-match "<strong>" txt)))) (flatten day-list)))
       (event-list (map(lambda(l1 l2)(map (lambda(s1 s2) (concatenate (list s1 s2))) l1 l2)) ort-list speaker-list))
       (event-list (mmap (lambda(l)(if(=(length l)5)(concatenate (list (list-head l 4)(list-ref l 4)))l)) event-list))
       (event-list (map(lambda(ll)(map(lambda(l)(map string-trim-both l))ll))event-list))
       )
  (map list date-list event-list)
))

(define (today-seminars dateline)(if(null? (filter (lambda(s)(string=? dateline (car s))) event-list))"(empty)\n"
  (let* ((event-struct (filter (lambda(s)(string=? dateline (car s))) event-list))
         (event-struct (cadar event-struct))
         (event->s(lambda(e)(if(=(length e)3)
                              (format #f "Speaker: ~a~%Time: ~a~%Place: ~a~%" (first e)(second e)(third e))
                              (format #f "Speaker: ~a~%Topic: ~a~%Time: ~a~%Place: ~a~%" (fourth e)(fifth e)(second e)(third e)))))
         (event-lines(map event->s event-struct))
         (res (string-concatenate (interleave event-lines "\n" #f)))
         )
    res
  )))
;organization, time, room,( author, topic)
