/*master_master.tm images:lem-reg-criterion-generic*/
texoutput : ".texput.tex"$
texput(mylambda,"\\lambda")$
texput(nu,"\\nu")$
texput(lambdatilde,"\\tilde{\\lambda}")$
texput(G,"\\Gamma")$
texput(Pi,"\\pi")$

G(q/2)*sqrt(Pi)*G((1-nu)/2)*G((mylambda-nu)/2)*G((mylambda+nu-q)/2)/G(mylambda/2)/G((mylambda+1-q)/2)/G((q-nu+1)/2);
substitute(solve([A=(q-2)/2,B=(mylambda+nu-q)/2-1],[mylambda,q]),%);
substitute((2+2*B)/2=1+B,%);
substitute((2+2*A)/2=1+A,%);
substitute((4-2*nu+2*A+2*B)/2=2-nu+A+B,%);
expr:%;
tex(expr,texoutput);

expr1:-G(1-nu/2)*G(A+1)*G(B+A-nu+2)*G(B+1)/G((3-nu+2*A)/2)/G((4-nu+2*B)/2)/G((5-nu+2*A+2*B)/2);
tex(expr1,texoutput);

tex(expand(psubst([-nu=-nu-b,A=(q-2)/2+b,B=(2*i+mylambda+nu-q+N+2*j)/2-1],expr)),texoutput);

norm:G(1-nu)*G((1-b-nu)/2)/G(-nu-b+1)/G((1+b-nu+q)/2);
norm1:G(1-nu)*G(1-(b+nu)/2)/G(-nu-b+1)/G((1+b-nu+q)/2);

psubst([nu=nu+b,A=(q-2)/2+b,B=(2*i+mylambda+nu-q+N+2*j)/2-1],expr);
%*sqrt(Pi)/G(b+1)/2^(q-b-1)*G(q+b)*G(1-nu)/G(q/2+b)/G(-nu-b+1);
%*Pi^((p-1)/2)*2^(nu-n)*G((mylambda+nu-n+2*j+N+1)/2)/G((mylambda+nu-n+2*j+N+p)/2);
expand(%);
combine(%);
%/G(q+b)*G(b+1)/2^(1+b-n+nu-q);
substitute(Pi=1,%);
substitute(mylambda-n+nu+p+N=mylambda-q+nu+N,%);
%/norm;
final_expr:%;
tex(final_expr,texoutput);

psubst([nu=nu+b,A=(q-2)/2+b,B=(2*i+mylambda+nu-q+N+2*j)/2-1],expr1);
%*sqrt(Pi)/G(b+1)/2^(q-b-1)*G(q+b)*G(1-nu)/G(q/2+b)/G(-nu-b+1);
%*Pi^((p-1)/2)*2^(nu-n)*G((mylambda+nu-n+2*j+N+1)/2)/G((mylambda+nu-n+2*j+N+p)/2);
substitute((p-1)/2+1=(p+1)/2,%);
substitute((q-2)/2=q/2-1,%);
substitute(2*(q/2+b-1)=q+2*b-2,%);
substitute(substitute(z=(-nu)-b,G(z)=2^(z-1)*G(z/2)*G((z+1)/2)/sqrt(Pi)),%);
combine(%);
substitute(2*((2*i+2*j+mylambda+nu-q+N)/2-1)=2*i+2*j+mylambda+nu-q+N-2,%);
%/G(q+b)*G(b+1)/2^(1+b-n+nu-q);
substitute(Pi=1,%);
substitute(2*j+mylambda-n+nu+p+N=2*j+mylambda-q+nu+N,%);
substitute((2*i+2*j+mylambda+nu+N)/2-nu=(2*i+2*j+mylambda-nu+N)/2,%);
%/norm1;
expand(%);combine(%);
final_expr1:-factor(%);
tex("odd"=final_expr1,texoutput);

norm;
%/G((1-nu)/2)/G((mylambda+nu-n+1)/2)/G((mylambda-nu)/2);
substitute(G(-nu-b+1)=G(1-(nu+b)/2)*G((1-nu-b)/2),%);
substitute(G(1-nu)=G((1-nu)/2)*G(1-nu/2),%);
tex("norm even"=%,texoutput);

norm1;
%/G((1-nu)/2)/G((mylambda+nu-n+1)/2)/G((mylambda-nu)/2);
substitute(G(-nu-b+1)=G(1-(nu+b)/2)*G((1-nu-b)/2),%);
substitute(G(1-nu)=G((1-nu)/2)*G(1-nu/2),%);
tex("norm odd"=%,texoutput);

final_expr*norm;
substitute([i=0,j=0],%);
substitute([G(b+1)=1,G(q+b)=1,Pi^((1+p)/2)=1,2^(N-q+nu-n+b+1)=1],%);
substitute(G(1-nu)=G((1-nu)/2)*G(1-nu/2),%);
%/G((1-nu)/2)/G((mylambda+nu-n+1)/2)/G((mylambda-nu)/2);
substitute(mylambda-n+nu+p+N=mylambda-q+nu+N,%);
substitute(G(-nu-b+1)=G((1-b-nu)/2)*G(1-(b+nu)/2),%);
substitute(2^N=1,%);
tex(%,texoutput);

final_expr1*norm1;
substitute([i=0,j=0],%);
substitute(G(1-nu)=G((1-nu)/2)*G(1-nu/2),%);
substitute(G(-nu-b+1)=G(1-(b+nu)/2)*G((1-b-nu)/2),%);
substitute(2^N=1,%);
%/G((1-nu)/2)/G((mylambda+nu-n+1)/2)/G((mylambda-nu)/2);
tex(%,texoutput);

tex(substitute(b=0,final_expr),texoutput);
substitute(b=1,final_expr1);
substitute((-1+mylambda-q+N)/2+j+i+1=(1+mylambda-q+N)/2+j+i,%);
tex(%,texoutput);
